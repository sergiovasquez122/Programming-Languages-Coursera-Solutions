- In functional (and procedural) programming, break programs down into functions that perform some operation
- In object-oriented programming, break programs down into classes that give behavior to some kind of data

Beginning of this unit:
    - These two forms of decompostion are so exactly opposite
      that they are two ways of looking at the same "matrix"
    - Which form is "better" is somewhat personal taste, but also depends on how you expect to change/extend software
    - For some operations over two arguments, functions and pattern-matching are straightforward, but with OOP
      we can do it with double dispatch

The expression example

Well-known and compelling example of a common pattern:
    - Expressions for a small language
    - Different variants of expressions: ints, additions, negations, ...
    - Different operations to perform: eval, toString, hasZero, ...
leads to a matrix of variants and operations

Standard approach in ML
- Define a datatype, with one constructor for each variant

Fill out the grid via one function per column
- Each function has on branch for each column entry
- Can combine cases, if multiple entires in column are same

Standard approach in OOP

Define a class, with one abstract methods for each operation

- Define a subclass for each variant
- So fill out the graid via one class per row with one method implemenation for each grid position
